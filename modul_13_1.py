# Задача "Асинхронные силачи":
# Необходимо сделать имитацию соревнований по поднятию шаров Атласа.
# Напишите асинхронную функцию start_strongman(name, power), где name - имя силача,
# power - его подъёмная мощность. Реализуйте следующую логику в функции:
# В начале работы должна выводиться строка - 'Силач <имя силача> начал соревнования.'
# После должна выводиться строка - 'Силач <имя силача> поднял <номер шара>' с задержкой
# обратно пропорциональной его силе power. Для каждого участника количество шаров одинаковое - 5.
# В конце поднятия всех шаров должна выводится строка 'Силач <имя силача> закончил соревнования.'
# Также напишите асинхронную функцию start_tournament, в которой создаются 3 задачи
# ля функций start_strongman. Имена(name) и силу(power) для вызовов
# функции start_strongman можете выбрать самостоятельно.
# После поставьте каждую задачу в ожидание (await).
# Запустите асинхронную функцию start_tournament методом run.
# Примечания:
# Для обозначения асинхронной функции используйте оператор async.
# Для постановки задачи в режим ожидания используйте оператор await.
# Для задержки в асинхронной функции используйте функцию sleep из пакета asyncio.
# Для запуска асинхронной функции используйте функцию run из пакета asyncio.

import time
import asyncio


async def start_strongman(name, power):
    print(f'Силач {name} начал соревнования.')
    i = 1
    for i in range(1, 6):
        await asyncio.sleep(1 / power)
        print(f'Силач {name} поднял {i} шар')
        i += 1
    print(f'Силач {name} закончил соревнования.')


async def start_tournament():
    task1 = asyncio.create_task(start_strongman('Pasha', 3))
    task2 = asyncio.create_task(start_strongman('Denis', 4))
    tack3 = asyncio.create_task(start_strongman('Apollon', 5))
    await task1
    await task2
    await tack3

asyncio.run(start_tournament())
